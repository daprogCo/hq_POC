import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

DB_NAME = "hq_warehouse"
DB_USER = "airflow"
DB_PASSWORD = "airflow"
DB_HOST = "postgres"
DB_PORT = "5432"

# Connexion à PostgreSQL
conn = psycopg2.connect(
    dbname="postgres",  # se connecter à la base postgres pour créer une autre base
    user=DB_USER,
    password=DB_PASSWORD,
    host=DB_HOST,
    port=DB_PORT
)
conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
cursor = conn.cursor()

# Création de la base si elle n'existe pas
cursor.execute(f"SELECT 1 FROM pg_database WHERE datname = '{DB_NAME}'")
exists = cursor.fetchone()

if not exists:
    print(f"Creating database '{DB_NAME}'...")
    cursor.execute(f"CREATE DATABASE {DB_NAME}")
else:
    print(f"Database '{DB_NAME}' already exists.")

cursor.close()
conn.close()

# Connexion à la base hq_warehouse pour créer les tables
conn = psycopg2.connect(
    dbname=DB_NAME,
    user=DB_USER,
    password=DB_PASSWORD,
    host=DB_HOST,
    port=DB_PORT
)
cursor = conn.cursor()

TABLES = {
    "villes": """
        CREATE TABLE IF NOT EXISTS villes (
            id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            nom VARCHAR(255),
            code_hq VARCHAR(20),
            code_meteo VARCHAR(20),
            latitude_avg NUMERIC(9,6),
            longitude_avg NUMERIC(9,6)
        );
    """,
    "pannes": """
        CREATE TABLE IF NOT EXISTS pannes (
            id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            id_ville INTEGER REFERENCES villes(id),
            latitude NUMERIC(16,14),
            longitude NUMERIC(16,14),
            debut TIMESTAMP,
            fin TIMESTAMP,
            meteo24h JSONB
        );
    """,
    "statuts": """
        CREATE TABLE IF NOT EXISTS statuts (
            id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            id_panne INTEGER REFERENCES pannes(id),
            statut VARCHAR(1),
            evaluation TIMESTAMP,
            cause VARCHAR(2),
            nb_clients INTEGER
        );
    """
}

for table, ddl in TABLES.items():
    print(f"Creating table '{table}'...")
    cursor.execute(ddl)

conn.commit()
cursor.close()
conn.close()
print("Database and tables initialized successfully.")